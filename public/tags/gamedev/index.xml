<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gamedev on Luke Wood</title><link>/tags/gamedev/</link><description>Recent content in gamedev on Luke Wood</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Luke Wood 2019</copyright><lastBuildDate>Mon, 16 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gamedev/index.xml" rel="self" type="application/rss+xml"/><item><title>Turning My Cactus into a Video Game</title><link>/posts/scanning_my_cactus/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/scanning_my_cactus/</guid><description>Today I wanted to mess around with 3D model scanning. I decided to turn my Cactus into a game prototype.
My beautiful cactus. Setup To get started I needed to take a 3d scan of my cactus. Recently an app called display.land was launched. The app lets you scan objects with your phone&amp;rsquo;s camera and turn them into 3d models.</description></item><item><title>Decouple Your Javascript Using Event Driven Programming</title><link>/posts/frontend_bulletz_refactor/</link><pubDate>Thu, 11 Jul 2019 20:13:20 -0700</pubDate><guid>/posts/frontend_bulletz_refactor/</guid><description>I am the sole author of the web game bulletz.io. Recently I refactored the frontend&amp;rsquo;s codebase to more closely match that of the backend. The backend is written using the functional programming language Elixir while the frontend is written in Vanilla Javascript. The programming languages are vastly different and are based on entirely different paradigms.
Originally the frontend was written using a generic Object Oriented model. This led to a great deal of technical debt, complicated UI interactions, and overall confusing code.</description></item></channel></rss>
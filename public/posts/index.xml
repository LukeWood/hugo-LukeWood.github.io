<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Luke Wood</title><link>/posts/</link><description>Recent content in Posts on Luke Wood</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Luke Wood 2019</copyright><lastBuildDate>Thu, 26 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I Love Elixir</title><link>/posts/why_i_love_elixir/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/why_i_love_elixir/</guid><description>I often talk about the Elixir programming language to friends, families, and colleagues.
While there are TONS of features in elixir that I think are fantastic&amp;hellip; off the top of my head:
OTP integration Concurrency model Runtime configuration CI/CD deployments Phoenix and Phoenix&amp;rsquo;s websocket model Note: maybe I&amp;rsquo;ll revisit each of these in a follow up post if there&amp;rsquo;s enough interest) One stands out to me amongst the rest.</description></item><item><title>Turning My Cactus into a Video Game</title><link>/posts/scanning_my_cactus/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/scanning_my_cactus/</guid><description>Today I wanted to mess around with 3D model scanning. I decided to turn my Cactus into a game prototype.
My beautiful cactus. Setup To get started I needed to take a 3d scan of my cactus. Recently an app called display.land was launched. The app lets you scan objects with your phone&amp;rsquo;s camera and turn them into 3d models.</description></item><item><title>Typescript Saved My Game's Performance</title><link>/posts/typescript_saved_my_game/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>/posts/typescript_saved_my_game/</guid><description>Background For quite awhile bulletz.io was written in vanilla javascript. The only libraries I used were RxJs and Phoenix Websockets. Performance was top notch for quite awhile due to the lack of framework, highly customized rendering code, and a specialized engine. I regularly got complements on the performance and smoothness of rendering.
A screenshot of bulletz.io October 2019 Several comments came in via email, forums, and text message from friends commenting on the poor rendering performance of my game bulletz.</description></item><item><title>Decouple Your Javascript Using Event Driven Programming</title><link>/posts/frontend_bulletz_refactor/</link><pubDate>Thu, 11 Jul 2019 20:13:20 -0700</pubDate><guid>/posts/frontend_bulletz_refactor/</guid><description>I am the sole author of the web game bulletz.io. Recently I refactored the frontend&amp;rsquo;s codebase to more closely match that of the backend. The backend is written using the functional programming language Elixir while the frontend is written in Vanilla Javascript. The programming languages are vastly different and are based on entirely different paradigms.
Originally the frontend was written using a generic Object Oriented model. This led to a great deal of technical debt, complicated UI interactions, and overall confusing code.</description></item><item><title>Spam Text Classification with RNNs</title><link>/posts/spam-text-classifier/</link><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid>/posts/spam-text-classifier/</guid><description>By Justin Ledford, Luke Wood, Traian Pop Business Understanding Data Background SMS messages play a huge role in a person&amp;rsquo;s life, and the confidentiality and integrity of said messages are of the highest priority to mobile carriers around the world. Due to this fact, many unlawful individuals and groups try and take advantange of the average consumer by flooding their inbox with spam, and while the majority of people successfully avoid it, there are people out there affected negatively by falling for false messages.</description></item></channel></rss>